---Advanced Pattern Questions---

 10. print butterfly star pattern.

                                     -basically,  spaces = 2*(n-i) --> which represent even spaces. 
                                         start upper half part--> from (1 to n).
                                         start lower half part--> from (n to 1).
      j 1   2   3   4   6
  i  1| * |           | * |
   2  | * | *       * | * |    
   3  | * | * | * | * | * |                
   4  | * | * | * | * | * |
   5  | * | *       * | * | 
   6  | *               * |
   
  
  class Pattern{
      public static void main(String[] args){
           
           int n = 4;
           
          //---upper part of pattern---
           for (int i=1;i<=n;i++){    //outer loop of upper part
               for (int j=1;j<=i;j++){   //inner loop of upper part
                  System.out.print("*"); 

               }
               int space = 2*(n-i);
               for (int j=1;j<=space;j++){  // for spaces print
                  System.out.print(" ");
               }
               for (int j=1;j<=i;j++){   //inner loop of upper part
                  System.out.print("*"); 
               }
               System.out.println();
           }
           //---lower part of pattern---
           for (int i=n;i>=1;i--){    //outer loop of lower part
               for (int j=1;j<=i;j++){    //inner loop of lower part
                  System.out.print("*"); 

               }
               int space = 2*(n-i);
               for (int j=1;j<=space;j++){   // for spaces print
                  System.out.print(" ");
               }
               for (int j=1;j<=i;j++){   //inner loop of upper part
                  System.out.print("*"); 
               }
               System.out.println();
            }
      }

   }  
 
   11. print the solid rohmbus pattern.


     (j) 1   2   3   4   5
(i) 1  |   |   | * | * | * |
    2  |   | * | * | * |   |     - basically,    spaces = (n-i).  
    3  | * | * | * |   |   |                   start--> from (1 to n).
  
   solution:

     class Pattern{
        public static void main(String[] args){
            
            int n = 5;
            //---upper part of pattern---
            for (int i=1;i<=n;i++){    //outer loop of upper part
               
                for (int j=1;j<=n-i;j++){  // for spaces print
                    System.out.print(" ");
                }
                for (int j=1;j<=5;j++){ //inner loop of upper part
                    System.out.print("*"); 
                }
                System.out.println();
            }
        }
     }  

 12. print the number pyramid.

           1  
         2   2
       3   3   3
     4   4   4   4
   5   5   5   5   5

  solution:

   public class Pattern{
        public static void main(String[] args){
            
            int n = 5;
            //---upper part of pattern---
            for (int i=1;i<=n;i++){        //outer loop of upper part
               
                for (int j=1;j<=n-i;j++){     // for spaces print
                    System.out.print(" ");
                }
                for (int j=1;j<=i;j++){      //inner loop of upper part
                    System.out.print(i+" "); 
                }
                System.out.println();
             }
         }  
    }


  13. print the palindrom number pattern.

          1
        2 1 2
      3 2 1 2 3
    4 3 2 1 2 3 4
  5 4 3 2 1 2 3 4 5

 solution:

    public class Pattern{
         public static void main(String[] args){
            
             int n = 6;
             //---left part of pattern---
             for (int i=1;i<=n;i++){       //outer loop of upper part
               
                for (int j=i;j<=n-i;j++){    // for spaces print
                    System.out.print(" ");
                }
                // print the spaces
                for (int j=i;j>=1;j--){     //inner loop of upper part
                    System.out.print(j+" ");
                }
                // print the right half part
                for (int j=2;j<=i;j++){
                    System.out.print(j+" ");
                }
                System.out.println();
             }
         }
    }  




 13. print the diamond star pattern.

          *
         * *
       * * * * 
      * * * * *
    * * * * * * *
      * * * * *
        * * *
          *

 solution:

      public class Pattern{
        public static void main(String[] args){
            
            int n = 5;
            //---upper part of pattern---
            for (int i=1; i<=n; i++){       //outer loop of upper part
               
                for (int j=i; j<=n-i; j++){    // for spaces print
                    System.out.print(" ");
                }
                // print the spaces
                for (int j=1; j<=i; j++){     //inner loop of upper part
                    System.out.print("*");
                }
                // print the stars
                for (int j=1; j<=2*i-1; j++){
                    System.out.print("*");
                }
                System.out.println();
            }
            // lower part of pattern
            for (int i=n; i>=1; i--){
                for(int j=1; j<=n-i; j++){
                    System.out.print(" ");
                }
                for (int j=1; j<=2*i-1; j++){
                    System.out.print("*");
                }
                System.out.println();
            
            }
        
         }
     }   

14. print the forward arrow with alphabetical manner.

                a
                ab
                abc
                abcd
                abc
                ab
                a


  public class Pattern {
    public static void main(String[] args) {
        int n = 4;
        
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                System.out.print((char)('a' + j));
            }
            System.out.println();
        }
        
        for (int i = n; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print((char)('a' + j - 1));
            }
            System.out.println();
        }
    }
}




 





